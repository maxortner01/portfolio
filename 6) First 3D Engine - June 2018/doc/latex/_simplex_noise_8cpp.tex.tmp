\section{src/engine/util/\+Simplex\+Noise.cpp File Reference}
\label{_simplex_noise_8cpp}\index{src/engine/util/\+Simplex\+Noise.\+cpp@{src/engine/util/\+Simplex\+Noise.\+cpp}}


A Perlin Simplex Noise C++ Implementation (1D, 2D, 3D).  


{\ttfamily \#include \char`\"{}Simplex\+Noise.\+h\char`\"{}}\newline
{\ttfamily \#include $<$cstdint$>$}\newline
Include dependency graph for Simplex\+Noise.\+cpp\+:
% FIG 0


\subsection{Detailed Description}
A Perlin Simplex Noise C++ Implementation (1D, 2D, 3D). 

Copyright (c) 2014-\/2018 Sebastien Rombauts ({\tt sebastien.\+rombauts@gmail.\+com})

This C++ implementation is based on the speed-\/improved Java version 2012-\/03-\/09 by Stefan Gustavson (original Java source code in the public domain). {\tt http\+://webstaff.\+itn.\+liu.\+se/$\sim$stegu/simplexnoise/\+Simplex\+Noise.\+java\+:}
\begin{DoxyItemize}
\item Based on example code by Stefan Gustavson ({\tt stegu@itn.\+liu.\+se}).
\item Optimisations by Peter Eastman ({\tt peastman@drizzle.\+stanford.\+edu}).
\item Better rank ordering method by Stefan Gustavson in 2012.
\end{DoxyItemize}

This implementation is \char`\"{}\+Simplex Noise\char`\"{} as presented by Ken Perlin at a relatively obscure and not often cited course session \char`\"{}\+Real-\/\+Time Shading\char`\"{} at Siggraph 2001 (before real time shading actually took on), under the title \char`\"{}hardware noise\char`\"{}. The 3D function is numerically equivalent to his Java reference code available in the P\+DF course notes, although I re-\/implemented it from scratch to get more readable code. The 1D, 2D and 4D cases were implemented from scratch by me from Ken Perlin\textquotesingle{}s text.

Distributed under the M\+IT License (M\+IT) (See accompanying file L\+I\+C\+E\+N\+S\+E.\+txt or copy at {\tt http\+://opensource.\+org/licenses/\+M\+IT}) 